AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  photo-app
  
  Serverless photo application that enables photo uploads and downloads via API Gateway,
  stores photos in S3, and metadata in DynamoDB.

# Global parameters that apply to all resources
Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment stage (dev, test, prod)
    AllowedValues:
      - dev
      - test
      - prod

Resources:
  # S3 Bucket for storing photos
  PhotosBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "photo-app-photos-${AWS::AccountId}-${Stage}"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToInfrequentAccess
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: STANDARD_IA

  # DynamoDB table for storing photo metadata
  PhotosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "PhotosTable-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: photoId
          AttributeType: S
      KeySchema:
        - AttributeName: photoId
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Lambda function for uploading photos
  UploadPhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/upload_photo/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          PHOTOS_TABLE: !Ref PhotosTable
          PHOTOS_BUCKET: !Ref PhotosBucket
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotosTable
        - S3CrudPolicy:
            BucketName: !Ref PhotosBucket
      Events:
        UploadPhoto:
          Type: HttpApi
          Properties:
            Path: /photos
            Method: post
            ApiId: !Ref HttpApi

  # Lambda function for getting photos
  GetPhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get_photo/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          PHOTOS_TABLE: !Ref PhotosTable
          PHOTOS_BUCKET: !Ref PhotosBucket
          URL_EXPIRATION: 3600
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PhotosTable
        - S3ReadPolicy:
            BucketName: !Ref PhotosBucket
      Events:
        GetPhoto:
          Type: HttpApi
          Properties:
            Path: /photos/{photoId}
            Method: get
            ApiId: !Ref HttpApi

  # HTTP API Gateway
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Stage
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowHeaders:
          - Content-Type
          - Authorization
        AllowMethods:
          - GET
          - POST
          - OPTIONS

Outputs:
  PhotosApiEndpoint:
    Description: "API Gateway endpoint URL for the photo application"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
  
  UploadPhotoFunction:
    Description: "Upload Photo Lambda Function ARN"
    Value: !GetAtt UploadPhotoFunction.Arn
  
  GetPhotoFunction:
    Description: "Get Photo Lambda Function ARN"
    Value: !GetAtt GetPhotoFunction.Arn
  
  PhotosBucket:
    Description: "S3 Bucket for storing photos"
    Value: !Ref PhotosBucket
  
  PhotosTable:
    Description: "DynamoDB table for storing photo metadata"
    Value: !Ref PhotosTable